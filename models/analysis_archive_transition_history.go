// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// AnalysisArchiveTransitionHistory A rule for auto-archiving image analysis by time and/or tag-history
// swagger:model AnalysisArchiveTransitionHistory
type AnalysisArchiveTransitionHistory struct {

	// created at
	// Format: date-time
	CreatedAt strfmt.DateTime `json:"created_at,omitempty"`

	// image digest
	ImageDigest string `json:"imageDigest,omitempty"`

	// last updated
	// Format: date-time
	LastUpdated strfmt.DateTime `json:"last_updated,omitempty"`

	// rule id
	RuleID string `json:"rule_id,omitempty"`

	// transition
	// Enum: [archive delete]
	Transition string `json:"transition,omitempty"`

	// The task that created & updated this entry
	TransitionTaskID string `json:"transition_task_id,omitempty"`
}

// Validate validates this analysis archive transition history
func (m *AnalysisArchiveTransitionHistory) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCreatedAt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLastUpdated(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTransition(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AnalysisArchiveTransitionHistory) validateCreatedAt(formats strfmt.Registry) error {

	if swag.IsZero(m.CreatedAt) { // not required
		return nil
	}

	if err := validate.FormatOf("created_at", "body", "date-time", m.CreatedAt.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *AnalysisArchiveTransitionHistory) validateLastUpdated(formats strfmt.Registry) error {

	if swag.IsZero(m.LastUpdated) { // not required
		return nil
	}

	if err := validate.FormatOf("last_updated", "body", "date-time", m.LastUpdated.String(), formats); err != nil {
		return err
	}

	return nil
}

var analysisArchiveTransitionHistoryTypeTransitionPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["archive","delete"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		analysisArchiveTransitionHistoryTypeTransitionPropEnum = append(analysisArchiveTransitionHistoryTypeTransitionPropEnum, v)
	}
}

const (

	// AnalysisArchiveTransitionHistoryTransitionArchive captures enum value "archive"
	AnalysisArchiveTransitionHistoryTransitionArchive string = "archive"

	// AnalysisArchiveTransitionHistoryTransitionDelete captures enum value "delete"
	AnalysisArchiveTransitionHistoryTransitionDelete string = "delete"
)

// prop value enum
func (m *AnalysisArchiveTransitionHistory) validateTransitionEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, analysisArchiveTransitionHistoryTypeTransitionPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *AnalysisArchiveTransitionHistory) validateTransition(formats strfmt.Registry) error {

	if swag.IsZero(m.Transition) { // not required
		return nil
	}

	// value enum
	if err := m.validateTransitionEnum("transition", "body", m.Transition); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *AnalysisArchiveTransitionHistory) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *AnalysisArchiveTransitionHistory) UnmarshalBinary(b []byte) error {
	var res AnalysisArchiveTransitionHistory
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
