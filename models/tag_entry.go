// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// TagEntry A docker-pullable tag value as well as deconstructed components
// swagger:model TagEntry
type TagEntry struct {

	// The timestamp at which the Anchore Engine detected this tag was mapped to the image digest. Does not necessarily indicate when the tag was actually pushed to the registry.
	// Format: date-time
	DetectedAt strfmt.DateTime `json:"detected_at,omitempty"`

	// The pullable string for the tag. E.g. "docker.io/library/node:latest"
	Pullstring string `json:"pullstring,omitempty"`

	// The registry hostname:port section of the pull string
	Registry string `json:"registry,omitempty"`

	// The repository section of the pull string
	Repository string `json:"repository,omitempty"`

	// The tag-only section of the pull string
	Tag string `json:"tag,omitempty"`
}

// Validate validates this tag entry
func (m *TagEntry) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDetectedAt(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *TagEntry) validateDetectedAt(formats strfmt.Registry) error {

	if swag.IsZero(m.DetectedAt) { // not required
		return nil
	}

	if err := validate.FormatOf("detected_at", "body", "date-time", m.DetectedAt.String(), formats); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *TagEntry) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *TagEntry) UnmarshalBinary(b []byte) error {
	var res TagEntry
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
