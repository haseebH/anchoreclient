// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Account Account information
// swagger:model Account
type Account struct {

	// The timestamp when the account was created
	// Format: date-time
	CreatedAt strfmt.DateTime `json:"created_at,omitempty"`

	// Optional email address associated with the account
	Email string `json:"email,omitempty"`

	// The timestamp of the last update to the account metadata itself (not users or creds)
	// Format: date-time
	LastUpdated strfmt.DateTime `json:"last_updated,omitempty"`

	// The account identifier, not updatable after creation
	// Required: true
	Name *string `json:"name"`

	// State of the account. Disabled accounts prevent member users from logging in, deleting accounts are disabled and pending deletion and will be removed once all owned resources are garbage collected by the system
	// Enum: [enabled disabled deleting]
	State string `json:"state,omitempty"`

	// The user type (admin vs user). If not specified in a POST request, 'user' is default
	// Enum: [user admin service]
	Type string `json:"type,omitempty"`
}

// Validate validates this account
func (m *Account) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCreatedAt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLastUpdated(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateState(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Account) validateCreatedAt(formats strfmt.Registry) error {

	if swag.IsZero(m.CreatedAt) { // not required
		return nil
	}

	if err := validate.FormatOf("created_at", "body", "date-time", m.CreatedAt.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *Account) validateLastUpdated(formats strfmt.Registry) error {

	if swag.IsZero(m.LastUpdated) { // not required
		return nil
	}

	if err := validate.FormatOf("last_updated", "body", "date-time", m.LastUpdated.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *Account) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

var accountTypeStatePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["enabled","disabled","deleting"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		accountTypeStatePropEnum = append(accountTypeStatePropEnum, v)
	}
}

const (

	// AccountStateEnabled captures enum value "enabled"
	AccountStateEnabled string = "enabled"

	// AccountStateDisabled captures enum value "disabled"
	AccountStateDisabled string = "disabled"

	// AccountStateDeleting captures enum value "deleting"
	AccountStateDeleting string = "deleting"
)

// prop value enum
func (m *Account) validateStateEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, accountTypeStatePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *Account) validateState(formats strfmt.Registry) error {

	if swag.IsZero(m.State) { // not required
		return nil
	}

	// value enum
	if err := m.validateStateEnum("state", "body", m.State); err != nil {
		return err
	}

	return nil
}

var accountTypeTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["user","admin","service"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		accountTypeTypePropEnum = append(accountTypeTypePropEnum, v)
	}
}

const (

	// AccountTypeUser captures enum value "user"
	AccountTypeUser string = "user"

	// AccountTypeAdmin captures enum value "admin"
	AccountTypeAdmin string = "admin"

	// AccountTypeService captures enum value "service"
	AccountTypeService string = "service"
)

// prop value enum
func (m *Account) validateTypeEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, accountTypeTypePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *Account) validateType(formats strfmt.Registry) error {

	if swag.IsZero(m.Type) { // not required
		return nil
	}

	// value enum
	if err := m.validateTypeEnum("type", "body", m.Type); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Account) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Account) UnmarshalBinary(b []byte) error {
	var res Account
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
