// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"strconv"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// StandaloneVulnerability A single vulnerability record in a single namespace, the unique key is the combinatino of the id and namespace
// swagger:model StandaloneVulnerability
type StandaloneVulnerability struct {

	// The array of packages (typically packages) that are vulnerable-to or provide fixes-for this vulnerability
	AffectedPackages []*PackageReference `json:"affected_packages"`

	// Vulnerability identifier. May be CVE-X, RHSA-X, etc. Not necessarily unique across namespaces
	ID string `json:"id,omitempty"`

	// URL for the upstream CVE record in the reporting source (e.g. ubuntu security tracker)
	Link string `json:"link,omitempty"`

	// The namespace for the vulnerability record to avoid conflicts for the same id in different distros or sources (e.g. deb vs ubuntu for same CVE)
	Namespace string `json:"namespace,omitempty"`

	// nvd data
	NvdData NvdDataList `json:"nvd_data,omitempty"`

	// Severity label specific to the namepsace
	// Enum: [Unknown Negligible Low Medium High Critical]
	Severity string `json:"severity,omitempty"`

	// vendor data
	VendorData VendorDataList `json:"vendor_data,omitempty"`
}

// Validate validates this standalone vulnerability
func (m *StandaloneVulnerability) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAffectedPackages(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNvdData(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSeverity(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVendorData(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *StandaloneVulnerability) validateAffectedPackages(formats strfmt.Registry) error {

	if swag.IsZero(m.AffectedPackages) { // not required
		return nil
	}

	for i := 0; i < len(m.AffectedPackages); i++ {
		if swag.IsZero(m.AffectedPackages[i]) { // not required
			continue
		}

		if m.AffectedPackages[i] != nil {
			if err := m.AffectedPackages[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("affected_packages" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *StandaloneVulnerability) validateNvdData(formats strfmt.Registry) error {

	if swag.IsZero(m.NvdData) { // not required
		return nil
	}

	if err := m.NvdData.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("nvd_data")
		}
		return err
	}

	return nil
}

var standaloneVulnerabilityTypeSeverityPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Unknown","Negligible","Low","Medium","High","Critical"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		standaloneVulnerabilityTypeSeverityPropEnum = append(standaloneVulnerabilityTypeSeverityPropEnum, v)
	}
}

const (

	// StandaloneVulnerabilitySeverityUnknown captures enum value "Unknown"
	StandaloneVulnerabilitySeverityUnknown string = "Unknown"

	// StandaloneVulnerabilitySeverityNegligible captures enum value "Negligible"
	StandaloneVulnerabilitySeverityNegligible string = "Negligible"

	// StandaloneVulnerabilitySeverityLow captures enum value "Low"
	StandaloneVulnerabilitySeverityLow string = "Low"

	// StandaloneVulnerabilitySeverityMedium captures enum value "Medium"
	StandaloneVulnerabilitySeverityMedium string = "Medium"

	// StandaloneVulnerabilitySeverityHigh captures enum value "High"
	StandaloneVulnerabilitySeverityHigh string = "High"

	// StandaloneVulnerabilitySeverityCritical captures enum value "Critical"
	StandaloneVulnerabilitySeverityCritical string = "Critical"
)

// prop value enum
func (m *StandaloneVulnerability) validateSeverityEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, standaloneVulnerabilityTypeSeverityPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *StandaloneVulnerability) validateSeverity(formats strfmt.Registry) error {

	if swag.IsZero(m.Severity) { // not required
		return nil
	}

	// value enum
	if err := m.validateSeverityEnum("severity", "body", m.Severity); err != nil {
		return err
	}

	return nil
}

func (m *StandaloneVulnerability) validateVendorData(formats strfmt.Registry) error {

	if swag.IsZero(m.VendorData) { // not required
		return nil
	}

	if err := m.VendorData.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("vendor_data")
		}
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *StandaloneVulnerability) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *StandaloneVulnerability) UnmarshalBinary(b []byte) error {
	var res StandaloneVulnerability
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
