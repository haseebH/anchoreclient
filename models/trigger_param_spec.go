// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// TriggerParamSpec trigger param spec
// swagger:model TriggerParamSpec
type TriggerParamSpec struct {

	// description
	Description string `json:"description,omitempty"`

	// An example value for the parameter (encoded as a string if the parameter is an object or list type)
	Example *string `json:"example,omitempty"`

	// Parameter name as it appears in policy document
	Name string `json:"name,omitempty"`

	// Is this a required parameter or optional
	Required bool `json:"required,omitempty"`

	// State of the trigger parameter
	// Enum: [active deprecated eol]
	State string `json:"state,omitempty"`

	// The name of another trigger that supercedes this on functionally if this is deprecated
	SupercededBy *string `json:"superceded_by,omitempty"`

	// If present, a definition for validation of input. Typically a jsonschema object that can be used to validate an input against.
	Validator interface{} `json:"validator,omitempty"`
}

// Validate validates this trigger param spec
func (m *TriggerParamSpec) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateState(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var triggerParamSpecTypeStatePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["active","deprecated","eol"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		triggerParamSpecTypeStatePropEnum = append(triggerParamSpecTypeStatePropEnum, v)
	}
}

const (

	// TriggerParamSpecStateActive captures enum value "active"
	TriggerParamSpecStateActive string = "active"

	// TriggerParamSpecStateDeprecated captures enum value "deprecated"
	TriggerParamSpecStateDeprecated string = "deprecated"

	// TriggerParamSpecStateEol captures enum value "eol"
	TriggerParamSpecStateEol string = "eol"
)

// prop value enum
func (m *TriggerParamSpec) validateStateEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, triggerParamSpecTypeStatePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *TriggerParamSpec) validateState(formats strfmt.Registry) error {

	if swag.IsZero(m.State) { // not required
		return nil
	}

	// value enum
	if err := m.validateStateEnum("state", "body", m.State); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *TriggerParamSpec) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *TriggerParamSpec) UnmarshalBinary(b []byte) error {
	var res TriggerParamSpec
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
