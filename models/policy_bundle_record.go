// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// PolicyBundleRecord A policy bundle plus some metadata
// swagger:model PolicyBundleRecord
type PolicyBundleRecord struct {

	// True if the bundle is currently defined to be used automatically
	Active bool `json:"active,omitempty"`

	// created at
	// Format: date-time
	CreatedAt strfmt.DateTime `json:"created_at,omitempty"`

	// last updated
	// Format: date-time
	LastUpdated strfmt.DateTime `json:"last_updated,omitempty"`

	// The bundle's identifier
	PolicyID string `json:"policyId,omitempty"`

	// Source location of where the policy bundle originated
	PolicySource string `json:"policy_source,omitempty"`

	// policybundle
	Policybundle *PolicyBundle `json:"policybundle,omitempty"`

	// UserId of the user that owns the bundle
	UserID string `json:"userId,omitempty"`
}

// Validate validates this policy bundle record
func (m *PolicyBundleRecord) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCreatedAt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLastUpdated(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePolicybundle(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PolicyBundleRecord) validateCreatedAt(formats strfmt.Registry) error {

	if swag.IsZero(m.CreatedAt) { // not required
		return nil
	}

	if err := validate.FormatOf("created_at", "body", "date-time", m.CreatedAt.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *PolicyBundleRecord) validateLastUpdated(formats strfmt.Registry) error {

	if swag.IsZero(m.LastUpdated) { // not required
		return nil
	}

	if err := validate.FormatOf("last_updated", "body", "date-time", m.LastUpdated.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *PolicyBundleRecord) validatePolicybundle(formats strfmt.Registry) error {

	if swag.IsZero(m.Policybundle) { // not required
		return nil
	}

	if m.Policybundle != nil {
		if err := m.Policybundle.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("policybundle")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *PolicyBundleRecord) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PolicyBundleRecord) UnmarshalBinary(b []byte) error {
	var res PolicyBundleRecord
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
