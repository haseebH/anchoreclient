// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
)

// ContentPackageResponse Package content listings from images
// swagger:model ContentPackageResponse
type ContentPackageResponse struct {

	// content
	Content []*ContentPackageResponseContentItems0 `json:"content"`

	// content type
	ContentType string `json:"content_type,omitempty"`

	// image digest
	ImageDigest string `json:"imageDigest,omitempty"`
}

// Validate validates this content package response
func (m *ContentPackageResponse) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateContent(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ContentPackageResponse) validateContent(formats strfmt.Registry) error {

	if swag.IsZero(m.Content) { // not required
		return nil
	}

	for i := 0; i < len(m.Content); i++ {
		if swag.IsZero(m.Content[i]) { // not required
			continue
		}

		if m.Content[i] != nil {
			if err := m.Content[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("content" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *ContentPackageResponse) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ContentPackageResponse) UnmarshalBinary(b []byte) error {
	var res ContentPackageResponse
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// ContentPackageResponseContentItems0 content package response content items0
// swagger:model ContentPackageResponseContentItems0
type ContentPackageResponseContentItems0 struct {

	// license
	License string `json:"license,omitempty"`

	// location
	Location string `json:"location,omitempty"`

	// origin
	Origin string `json:"origin,omitempty"`

	// package
	Package string `json:"package,omitempty"`

	// size
	Size string `json:"size,omitempty"`

	// type
	Type string `json:"type,omitempty"`

	// version
	Version string `json:"version,omitempty"`
}

// Validate validates this content package response content items0
func (m *ContentPackageResponseContentItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *ContentPackageResponseContentItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ContentPackageResponseContentItems0) UnmarshalBinary(b []byte) error {
	var res ContentPackageResponseContentItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
