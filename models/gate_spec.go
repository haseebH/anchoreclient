// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"strconv"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// GateSpec A description of the set of gates available in this engine and the triggers and parameters supported
// swagger:model GateSpec
type GateSpec struct {

	// Description of the gate
	Description string `json:"description,omitempty"`

	// Gate name, as it would appear in a policy document
	Name string `json:"name,omitempty"`

	// State of the gate and transitively all triggers it contains if not 'active'
	// Enum: [active deprecated eol]
	State string `json:"state,omitempty"`

	// The name of another trigger that supercedes this on functionally if this is deprecated
	SupercededBy *string `json:"superceded_by,omitempty"`

	// List of the triggers that can fire for this Gate
	Triggers []*TriggerSpec `json:"triggers"`
}

// Validate validates this gate spec
func (m *GateSpec) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateState(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTriggers(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var gateSpecTypeStatePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["active","deprecated","eol"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		gateSpecTypeStatePropEnum = append(gateSpecTypeStatePropEnum, v)
	}
}

const (

	// GateSpecStateActive captures enum value "active"
	GateSpecStateActive string = "active"

	// GateSpecStateDeprecated captures enum value "deprecated"
	GateSpecStateDeprecated string = "deprecated"

	// GateSpecStateEol captures enum value "eol"
	GateSpecStateEol string = "eol"
)

// prop value enum
func (m *GateSpec) validateStateEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, gateSpecTypeStatePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *GateSpec) validateState(formats strfmt.Registry) error {

	if swag.IsZero(m.State) { // not required
		return nil
	}

	// value enum
	if err := m.validateStateEnum("state", "body", m.State); err != nil {
		return err
	}

	return nil
}

func (m *GateSpec) validateTriggers(formats strfmt.Registry) error {

	if swag.IsZero(m.Triggers) { // not required
		return nil
	}

	for i := 0; i < len(m.Triggers); i++ {
		if swag.IsZero(m.Triggers[i]) { // not required
			continue
		}

		if m.Triggers[i] != nil {
			if err := m.Triggers[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("triggers" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *GateSpec) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *GateSpec) UnmarshalBinary(b []byte) error {
	var res GateSpec
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
