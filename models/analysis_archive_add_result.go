// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// AnalysisArchiveAddResult The result of adding a single digest to the archive
// swagger:model AnalysisArchiveAddResult
type AnalysisArchiveAddResult struct {

	// Details on the status, e.g. the error message
	Detail string `json:"detail,omitempty"`

	// The image digest requested to be added
	Digest string `json:"digest,omitempty"`

	// The status of the archive add operation. Typically either 'archived' or 'error'
	// Enum: [archived archiving error]
	Status string `json:"status,omitempty"`
}

// Validate validates this analysis archive add result
func (m *AnalysisArchiveAddResult) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var analysisArchiveAddResultTypeStatusPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["archived","archiving","error"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		analysisArchiveAddResultTypeStatusPropEnum = append(analysisArchiveAddResultTypeStatusPropEnum, v)
	}
}

const (

	// AnalysisArchiveAddResultStatusArchived captures enum value "archived"
	AnalysisArchiveAddResultStatusArchived string = "archived"

	// AnalysisArchiveAddResultStatusArchiving captures enum value "archiving"
	AnalysisArchiveAddResultStatusArchiving string = "archiving"

	// AnalysisArchiveAddResultStatusError captures enum value "error"
	AnalysisArchiveAddResultStatusError string = "error"
)

// prop value enum
func (m *AnalysisArchiveAddResult) validateStatusEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, analysisArchiveAddResultTypeStatusPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *AnalysisArchiveAddResult) validateStatus(formats strfmt.Registry) error {

	if swag.IsZero(m.Status) { // not required
		return nil
	}

	// value enum
	if err := m.validateStatusEnum("status", "body", m.Status); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *AnalysisArchiveAddResult) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *AnalysisArchiveAddResult) UnmarshalBinary(b []byte) error {
	var res AnalysisArchiveAddResult
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
