// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// PolicyBundle A bundle containing a set of policies, whitelists, and rules for mapping them to specific images
// swagger:model PolicyBundle
type PolicyBundle struct {

	// List of mapping rules that define which images should always result in a STOP/FAIL policy result regardless of policy content or presence in whitelisted_images
	BlacklistedImages []*ImageSelectionRule `json:"blacklisted_images"`

	// Description of the bundle, human readable
	Comment string `json:"comment,omitempty"`

	// Id of the bundle
	// Required: true
	ID *string `json:"id"`

	// Mapping rules for defining which policy and whitelist(s) to apply to an image based on a match of the image tag or id. Evaluated in order.
	// Required: true
	Mappings []*MappingRule `json:"mappings"`

	// Human readable name for the bundle
	Name string `json:"name,omitempty"`

	// Policies which define the go/stop/warn status of an image using rule matches on image properties
	// Required: true
	Policies []*Policy `json:"policies"`

	// Version id for this bundle format
	// Required: true
	Version *string `json:"version"`

	// List of mapping rules that define which images should always be passed (unless also on the blacklist), regardless of policy result.
	WhitelistedImages []*ImageSelectionRule `json:"whitelisted_images"`

	// Whitelists which define which policy matches to disregard explicitly in the final policy decision
	Whitelists []*Whitelist `json:"whitelists"`
}

// Validate validates this policy bundle
func (m *PolicyBundle) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateBlacklistedImages(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMappings(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePolicies(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVersion(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateWhitelistedImages(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateWhitelists(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PolicyBundle) validateBlacklistedImages(formats strfmt.Registry) error {

	if swag.IsZero(m.BlacklistedImages) { // not required
		return nil
	}

	for i := 0; i < len(m.BlacklistedImages); i++ {
		if swag.IsZero(m.BlacklistedImages[i]) { // not required
			continue
		}

		if m.BlacklistedImages[i] != nil {
			if err := m.BlacklistedImages[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("blacklisted_images" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *PolicyBundle) validateID(formats strfmt.Registry) error {

	if err := validate.Required("id", "body", m.ID); err != nil {
		return err
	}

	return nil
}

func (m *PolicyBundle) validateMappings(formats strfmt.Registry) error {

	if err := validate.Required("mappings", "body", m.Mappings); err != nil {
		return err
	}

	for i := 0; i < len(m.Mappings); i++ {
		if swag.IsZero(m.Mappings[i]) { // not required
			continue
		}

		if m.Mappings[i] != nil {
			if err := m.Mappings[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("mappings" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *PolicyBundle) validatePolicies(formats strfmt.Registry) error {

	if err := validate.Required("policies", "body", m.Policies); err != nil {
		return err
	}

	for i := 0; i < len(m.Policies); i++ {
		if swag.IsZero(m.Policies[i]) { // not required
			continue
		}

		if m.Policies[i] != nil {
			if err := m.Policies[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("policies" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *PolicyBundle) validateVersion(formats strfmt.Registry) error {

	if err := validate.Required("version", "body", m.Version); err != nil {
		return err
	}

	return nil
}

func (m *PolicyBundle) validateWhitelistedImages(formats strfmt.Registry) error {

	if swag.IsZero(m.WhitelistedImages) { // not required
		return nil
	}

	for i := 0; i < len(m.WhitelistedImages); i++ {
		if swag.IsZero(m.WhitelistedImages[i]) { // not required
			continue
		}

		if m.WhitelistedImages[i] != nil {
			if err := m.WhitelistedImages[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("whitelisted_images" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *PolicyBundle) validateWhitelists(formats strfmt.Registry) error {

	if swag.IsZero(m.Whitelists) { // not required
		return nil
	}

	for i := 0; i < len(m.Whitelists); i++ {
		if swag.IsZero(m.Whitelists[i]) { // not required
			continue
		}

		if m.Whitelists[i] != nil {
			if err := m.Whitelists[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("whitelists" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *PolicyBundle) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PolicyBundle) UnmarshalBinary(b []byte) error {
	var res PolicyBundle
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
