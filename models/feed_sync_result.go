// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"strconv"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// FeedSyncResult The result of a sync of a single feed
// swagger:model FeedSyncResult
type FeedSyncResult struct {

	// The name of the feed synced
	Feed string `json:"feed,omitempty"`

	// Array of group sync results
	Groups []*GroupSyncResult `json:"groups"`

	// The result of the sync operations, either co
	// Enum: [success failure]
	Status string `json:"status,omitempty"`

	// The duratin, in seconds, of the sync of the feed, the sum of all the group syncs
	TotalTimeSeconds float64 `json:"total_time_seconds,omitempty"`
}

// Validate validates this feed sync result
func (m *FeedSyncResult) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateGroups(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *FeedSyncResult) validateGroups(formats strfmt.Registry) error {

	if swag.IsZero(m.Groups) { // not required
		return nil
	}

	for i := 0; i < len(m.Groups); i++ {
		if swag.IsZero(m.Groups[i]) { // not required
			continue
		}

		if m.Groups[i] != nil {
			if err := m.Groups[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("groups" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

var feedSyncResultTypeStatusPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["success","failure"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		feedSyncResultTypeStatusPropEnum = append(feedSyncResultTypeStatusPropEnum, v)
	}
}

const (

	// FeedSyncResultStatusSuccess captures enum value "success"
	FeedSyncResultStatusSuccess string = "success"

	// FeedSyncResultStatusFailure captures enum value "failure"
	FeedSyncResultStatusFailure string = "failure"
)

// prop value enum
func (m *FeedSyncResult) validateStatusEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, feedSyncResultTypeStatusPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *FeedSyncResult) validateStatus(formats strfmt.Registry) error {

	if swag.IsZero(m.Status) { // not required
		return nil
	}

	// value enum
	if err := m.validateStatusEnum("status", "body", m.Status); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *FeedSyncResult) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *FeedSyncResult) UnmarshalBinary(b []byte) error {
	var res FeedSyncResult
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
