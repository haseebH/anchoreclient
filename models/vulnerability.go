// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
)

// Vulnerability vulnerability
// swagger:model Vulnerability
type Vulnerability struct {

	// The name of the feed where vulnerability match was made
	Feed string `json:"feed,omitempty"`

	// The name of the feed group where vulnerability match was made
	FeedGroup string `json:"feed_group,omitempty"`

	// The package containing a fix, if available
	Fix string `json:"fix,omitempty"`

	// nvd data
	NvdData NvdDataList `json:"nvd_data,omitempty"`

	// The package name and version that are vulnerable in the image
	Package string `json:"package,omitempty"`

	// The CPE string (if applicable) describing the package to vulnerability match
	PackageCpe string `json:"package_cpe,omitempty"`

	// The name of the vulnerable package artifact
	PackageName string `json:"package_name,omitempty"`

	// The location (if applicable) of the vulnerable package in the container filesystem
	PackagePath string `json:"package_path,omitempty"`

	// The type of vulnerable package
	PackageType string `json:"package_type,omitempty"`

	// The version of the vulnerable package artifact
	PackageVersion string `json:"package_version,omitempty"`

	// The severity of the vulnerability
	Severity string `json:"severity,omitempty"`

	// The url for more information about the vulnerability
	URL string `json:"url,omitempty"`

	// vendor data
	VendorData VendorDataList `json:"vendor_data,omitempty"`

	// The vulnerability identifier, such as CVE-2017-100, or RHSA-2017123
	Vuln string `json:"vuln,omitempty"`
}

// Validate validates this vulnerability
func (m *Vulnerability) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateNvdData(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVendorData(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Vulnerability) validateNvdData(formats strfmt.Registry) error {

	if swag.IsZero(m.NvdData) { // not required
		return nil
	}

	if err := m.NvdData.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("nvd_data")
		}
		return err
	}

	return nil
}

func (m *Vulnerability) validateVendorData(formats strfmt.Registry) error {

	if swag.IsZero(m.VendorData) { // not required
		return nil
	}

	if err := m.VendorData.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("vendor_data")
		}
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Vulnerability) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Vulnerability) UnmarshalBinary(b []byte) error {
	var res Vulnerability
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
