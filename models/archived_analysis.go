// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"strconv"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ArchivedAnalysis archived analysis
// swagger:model ArchivedAnalysis
type ArchivedAnalysis struct {

	// analyzed at
	// Format: date-time
	AnalyzedAt strfmt.DateTime `json:"analyzed_at,omitempty"`

	// User provided annotations as key-value pairs
	Annotations interface{} `json:"annotations,omitempty"`

	// The size, in bytes, of the analysis archive file
	ArchiveSizeBytes int64 `json:"archive_size_bytes,omitempty"`

	// created at
	// Format: date-time
	CreatedAt strfmt.DateTime `json:"created_at,omitempty"`

	// The image digest (digest of the manifest describing the image, per docker spec)
	ImageDigest string `json:"imageDigest,omitempty"`

	// List of tags associated with the image digest
	ImageDetail []*TagEntry `json:"image_detail"`

	// last updated
	// Format: date-time
	LastUpdated strfmt.DateTime `json:"last_updated,omitempty"`

	// The digest of a parent manifest (for manifest-list images)
	ParentDigest string `json:"parentDigest,omitempty"`

	// The archival status
	// Enum: [archiving archived deleting deleted]
	Status string `json:"status,omitempty"`
}

// Validate validates this archived analysis
func (m *ArchivedAnalysis) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAnalyzedAt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCreatedAt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateImageDetail(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLastUpdated(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ArchivedAnalysis) validateAnalyzedAt(formats strfmt.Registry) error {

	if swag.IsZero(m.AnalyzedAt) { // not required
		return nil
	}

	if err := validate.FormatOf("analyzed_at", "body", "date-time", m.AnalyzedAt.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *ArchivedAnalysis) validateCreatedAt(formats strfmt.Registry) error {

	if swag.IsZero(m.CreatedAt) { // not required
		return nil
	}

	if err := validate.FormatOf("created_at", "body", "date-time", m.CreatedAt.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *ArchivedAnalysis) validateImageDetail(formats strfmt.Registry) error {

	if swag.IsZero(m.ImageDetail) { // not required
		return nil
	}

	for i := 0; i < len(m.ImageDetail); i++ {
		if swag.IsZero(m.ImageDetail[i]) { // not required
			continue
		}

		if m.ImageDetail[i] != nil {
			if err := m.ImageDetail[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("image_detail" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ArchivedAnalysis) validateLastUpdated(formats strfmt.Registry) error {

	if swag.IsZero(m.LastUpdated) { // not required
		return nil
	}

	if err := validate.FormatOf("last_updated", "body", "date-time", m.LastUpdated.String(), formats); err != nil {
		return err
	}

	return nil
}

var archivedAnalysisTypeStatusPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["archiving","archived","deleting","deleted"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		archivedAnalysisTypeStatusPropEnum = append(archivedAnalysisTypeStatusPropEnum, v)
	}
}

const (

	// ArchivedAnalysisStatusArchiving captures enum value "archiving"
	ArchivedAnalysisStatusArchiving string = "archiving"

	// ArchivedAnalysisStatusArchived captures enum value "archived"
	ArchivedAnalysisStatusArchived string = "archived"

	// ArchivedAnalysisStatusDeleting captures enum value "deleting"
	ArchivedAnalysisStatusDeleting string = "deleting"

	// ArchivedAnalysisStatusDeleted captures enum value "deleted"
	ArchivedAnalysisStatusDeleted string = "deleted"
)

// prop value enum
func (m *ArchivedAnalysis) validateStatusEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, archivedAnalysisTypeStatusPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *ArchivedAnalysis) validateStatus(formats strfmt.Registry) error {

	if swag.IsZero(m.Status) { // not required
		return nil
	}

	// value enum
	if err := m.validateStatusEnum("status", "body", m.Status); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ArchivedAnalysis) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ArchivedAnalysis) UnmarshalBinary(b []byte) error {
	var res ArchivedAnalysis
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
