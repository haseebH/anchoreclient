// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// AnalysisArchiveTransitionRule A rule for auto-archiving image analysis by time and/or tag-history
// swagger:model AnalysisArchiveTransitionRule
type AnalysisArchiveTransitionRule struct {

	// Matches if the analysis is strictly older than this number of days
	AnalysisAgeDays int64 `json:"analysis_age_days,omitempty"`

	// created at
	// Format: date-time
	CreatedAt strfmt.DateTime `json:"created_at,omitempty"`

	// last updated
	// Format: date-time
	LastUpdated strfmt.DateTime `json:"last_updated,omitempty"`

	// selector
	Selector *ImageSelector `json:"selector,omitempty"`

	// True if the rule applies to all accounts in the system. This is only available to admin users to update/modify, but all users with permission to list rules can see them
	SystemGlobal bool `json:"system_global,omitempty"`

	// Number of images mapped to the tag that are newer
	TagVersionsNewer int64 `json:"tag_versions_newer,omitempty"`

	// The type of transition to make. If "archive", then archive an image from the working set and remove it from the working set. If "delete", then match against archived images and delete from the archive if match.
	// Required: true
	// Enum: [archive delete]
	Transition *string `json:"transition"`
}

// Validate validates this analysis archive transition rule
func (m *AnalysisArchiveTransitionRule) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCreatedAt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLastUpdated(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSelector(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTransition(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AnalysisArchiveTransitionRule) validateCreatedAt(formats strfmt.Registry) error {

	if swag.IsZero(m.CreatedAt) { // not required
		return nil
	}

	if err := validate.FormatOf("created_at", "body", "date-time", m.CreatedAt.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *AnalysisArchiveTransitionRule) validateLastUpdated(formats strfmt.Registry) error {

	if swag.IsZero(m.LastUpdated) { // not required
		return nil
	}

	if err := validate.FormatOf("last_updated", "body", "date-time", m.LastUpdated.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *AnalysisArchiveTransitionRule) validateSelector(formats strfmt.Registry) error {

	if swag.IsZero(m.Selector) { // not required
		return nil
	}

	if m.Selector != nil {
		if err := m.Selector.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("selector")
			}
			return err
		}
	}

	return nil
}

var analysisArchiveTransitionRuleTypeTransitionPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["archive","delete"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		analysisArchiveTransitionRuleTypeTransitionPropEnum = append(analysisArchiveTransitionRuleTypeTransitionPropEnum, v)
	}
}

const (

	// AnalysisArchiveTransitionRuleTransitionArchive captures enum value "archive"
	AnalysisArchiveTransitionRuleTransitionArchive string = "archive"

	// AnalysisArchiveTransitionRuleTransitionDelete captures enum value "delete"
	AnalysisArchiveTransitionRuleTransitionDelete string = "delete"
)

// prop value enum
func (m *AnalysisArchiveTransitionRule) validateTransitionEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, analysisArchiveTransitionRuleTypeTransitionPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *AnalysisArchiveTransitionRule) validateTransition(formats strfmt.Registry) error {

	if err := validate.Required("transition", "body", m.Transition); err != nil {
		return err
	}

	// value enum
	if err := m.validateTransitionEnum("transition", "body", *m.Transition); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *AnalysisArchiveTransitionRule) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *AnalysisArchiveTransitionRule) UnmarshalBinary(b []byte) error {
	var res AnalysisArchiveTransitionRule
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
