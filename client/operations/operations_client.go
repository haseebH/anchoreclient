// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new operations API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for operations API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
GetOauthToken Request a jwt token for subsequent operations, this request is authenticated with normal HTTP auth
*/
func (a *Client) GetOauthToken(params *GetOauthTokenParams, authInfo runtime.ClientAuthInfoWriter) (*GetOauthTokenOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetOauthTokenParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "get_oauth_token",
		Method:             "POST",
		PathPattern:        "/oauth/token",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/x-www-form-urlencoded"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetOauthTokenReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetOauthTokenOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for get_oauth_token: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
HealthNoop Health check, returns 200 and no body if service is running
*/
func (a *Client) HealthNoop(params *HealthNoopParams, authInfo runtime.ClientAuthInfoWriter) (*HealthNoopOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewHealthNoopParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "health_noop",
		Method:             "GET",
		PathPattern:        "/health",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &HealthNoopReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*HealthNoopOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for health_noop: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ListFileContentSearchResults returns a list of analyzer artifacts of the specified type
*/
func (a *Client) ListFileContentSearchResults(params *ListFileContentSearchResultsParams, authInfo runtime.ClientAuthInfoWriter) (*ListFileContentSearchResultsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListFileContentSearchResultsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "list_file_content_search_results",
		Method:             "GET",
		PathPattern:        "/images/{imageDigest}/artifacts/file_content_search",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &ListFileContentSearchResultsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListFileContentSearchResultsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for list_file_content_search_results: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ListRetrievedFiles returns a list of analyzer artifacts of the specified type
*/
func (a *Client) ListRetrievedFiles(params *ListRetrievedFilesParams, authInfo runtime.ClientAuthInfoWriter) (*ListRetrievedFilesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListRetrievedFilesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "list_retrieved_files",
		Method:             "GET",
		PathPattern:        "/images/{imageDigest}/artifacts/retrieved_files",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &ListRetrievedFilesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListRetrievedFilesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for list_retrieved_files: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ListSecretSearchResults returns a list of analyzer artifacts of the specified type
*/
func (a *Client) ListSecretSearchResults(params *ListSecretSearchResultsParams, authInfo runtime.ClientAuthInfoWriter) (*ListSecretSearchResultsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListSecretSearchResultsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "list_secret_search_results",
		Method:             "GET",
		PathPattern:        "/images/{imageDigest}/artifacts/secret_search",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &ListSecretSearchResultsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListSecretSearchResultsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for list_secret_search_results: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
Ping Simple status check
*/
func (a *Client) Ping(params *PingParams, authInfo runtime.ClientAuthInfoWriter) (*PingOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPingParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ping",
		Method:             "GET",
		PathPattern:        "/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PingReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PingOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ping: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
VersionNoop Returns the version object for the service, including db schema version info
*/
func (a *Client) VersionNoop(params *VersionNoopParams, authInfo runtime.ClientAuthInfoWriter) (*VersionNoopOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewVersionNoopParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "version_noop",
		Method:             "GET",
		PathPattern:        "/version",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &VersionNoopReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*VersionNoopOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for version_noop: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
