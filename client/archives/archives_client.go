// Code generated by go-swagger; DO NOT EDIT.

package archives

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new archives API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for archives API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
ArchiveImageAnalysis archive image analysis API
*/
func (a *Client) ArchiveImageAnalysis(params *ArchiveImageAnalysisParams, authInfo runtime.ClientAuthInfoWriter) (*ArchiveImageAnalysisOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewArchiveImageAnalysisParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "archive_image_analysis",
		Method:             "POST",
		PathPattern:        "/archives/images",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &ArchiveImageAnalysisReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ArchiveImageAnalysisOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for archive_image_analysis: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
CreateAnalysisArchiveRule create analysis archive rule API
*/
func (a *Client) CreateAnalysisArchiveRule(params *CreateAnalysisArchiveRuleParams, authInfo runtime.ClientAuthInfoWriter) (*CreateAnalysisArchiveRuleOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateAnalysisArchiveRuleParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "create_analysis_archive_rule",
		Method:             "POST",
		PathPattern:        "/archives/rules",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &CreateAnalysisArchiveRuleReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateAnalysisArchiveRuleOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for create_analysis_archive_rule: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
DeleteAnalysisArchiveRule delete analysis archive rule API
*/
func (a *Client) DeleteAnalysisArchiveRule(params *DeleteAnalysisArchiveRuleParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteAnalysisArchiveRuleOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteAnalysisArchiveRuleParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "delete_analysis_archive_rule",
		Method:             "DELETE",
		PathPattern:        "/archives/rules/{ruleId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &DeleteAnalysisArchiveRuleReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteAnalysisArchiveRuleOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for delete_analysis_archive_rule: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
DeleteArchivedAnalysis Performs a synchronous archive deletion
*/
func (a *Client) DeleteArchivedAnalysis(params *DeleteArchivedAnalysisParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteArchivedAnalysisOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteArchivedAnalysisParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "delete_archived_analysis",
		Method:             "DELETE",
		PathPattern:        "/archives/images/{imageDigest}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &DeleteArchivedAnalysisReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteArchivedAnalysisOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for delete_archived_analysis: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetAnalysisArchiveRule get analysis archive rule API
*/
func (a *Client) GetAnalysisArchiveRule(params *GetAnalysisArchiveRuleParams, authInfo runtime.ClientAuthInfoWriter) (*GetAnalysisArchiveRuleOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAnalysisArchiveRuleParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "get_analysis_archive_rule",
		Method:             "GET",
		PathPattern:        "/archives/rules/{ruleId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetAnalysisArchiveRuleReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetAnalysisArchiveRuleOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for get_analysis_archive_rule: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetArchivedAnalysis Returns the archive metadata record identifying the image and tags for the analysis in the archive.
*/
func (a *Client) GetArchivedAnalysis(params *GetArchivedAnalysisParams, authInfo runtime.ClientAuthInfoWriter) (*GetArchivedAnalysisOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetArchivedAnalysisParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "get_archived_analysis",
		Method:             "GET",
		PathPattern:        "/archives/images/{imageDigest}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetArchivedAnalysisReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetArchivedAnalysisOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for get_archived_analysis: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ListAnalysisArchive list analysis archive API
*/
func (a *Client) ListAnalysisArchive(params *ListAnalysisArchiveParams, authInfo runtime.ClientAuthInfoWriter) (*ListAnalysisArchiveOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListAnalysisArchiveParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "list_analysis_archive",
		Method:             "GET",
		PathPattern:        "/archives/images",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &ListAnalysisArchiveReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListAnalysisArchiveOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for list_analysis_archive: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ListAnalysisArchiveRules list analysis archive rules API
*/
func (a *Client) ListAnalysisArchiveRules(params *ListAnalysisArchiveRulesParams, authInfo runtime.ClientAuthInfoWriter) (*ListAnalysisArchiveRulesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListAnalysisArchiveRulesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "list_analysis_archive_rules",
		Method:             "GET",
		PathPattern:        "/archives/rules",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &ListAnalysisArchiveRulesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListAnalysisArchiveRulesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for list_analysis_archive_rules: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ListArchives list archives API
*/
func (a *Client) ListArchives(params *ListArchivesParams, authInfo runtime.ClientAuthInfoWriter) (*ListArchivesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListArchivesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "list_archives",
		Method:             "GET",
		PathPattern:        "/archives",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &ListArchivesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListArchivesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for list_archives: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
