// Code generated by go-swagger; DO NOT EDIT.

package import_operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"

	strfmt "github.com/go-openapi/strfmt"
)

// NewImportImageArchiveParams creates a new ImportImageArchiveParams object
// with the default values initialized.
func NewImportImageArchiveParams() *ImportImageArchiveParams {
	var ()
	return &ImportImageArchiveParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewImportImageArchiveParamsWithTimeout creates a new ImportImageArchiveParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewImportImageArchiveParamsWithTimeout(timeout time.Duration) *ImportImageArchiveParams {
	var ()
	return &ImportImageArchiveParams{

		timeout: timeout,
	}
}

// NewImportImageArchiveParamsWithContext creates a new ImportImageArchiveParams object
// with the default values initialized, and the ability to set a context for a request
func NewImportImageArchiveParamsWithContext(ctx context.Context) *ImportImageArchiveParams {
	var ()
	return &ImportImageArchiveParams{

		Context: ctx,
	}
}

// NewImportImageArchiveParamsWithHTTPClient creates a new ImportImageArchiveParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewImportImageArchiveParamsWithHTTPClient(client *http.Client) *ImportImageArchiveParams {
	var ()
	return &ImportImageArchiveParams{
		HTTPClient: client,
	}
}

/*ImportImageArchiveParams contains all the parameters to send to the API endpoint
for the import image archive operation typically these are written to a http.Request
*/
type ImportImageArchiveParams struct {

	/*ArchiveFile
	  anchore image tar archive.

	*/
	ArchiveFile runtime.NamedReadCloser

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the import image archive params
func (o *ImportImageArchiveParams) WithTimeout(timeout time.Duration) *ImportImageArchiveParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the import image archive params
func (o *ImportImageArchiveParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the import image archive params
func (o *ImportImageArchiveParams) WithContext(ctx context.Context) *ImportImageArchiveParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the import image archive params
func (o *ImportImageArchiveParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the import image archive params
func (o *ImportImageArchiveParams) WithHTTPClient(client *http.Client) *ImportImageArchiveParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the import image archive params
func (o *ImportImageArchiveParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithArchiveFile adds the archiveFile to the import image archive params
func (o *ImportImageArchiveParams) WithArchiveFile(archiveFile runtime.NamedReadCloser) *ImportImageArchiveParams {
	o.SetArchiveFile(archiveFile)
	return o
}

// SetArchiveFile adds the archiveFile to the import image archive params
func (o *ImportImageArchiveParams) SetArchiveFile(archiveFile runtime.NamedReadCloser) {
	o.ArchiveFile = archiveFile
}

// WriteToRequest writes these params to a swagger request
func (o *ImportImageArchiveParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// form file param archive_file
	if err := r.SetFileParam("archive_file", o.ArchiveFile); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
