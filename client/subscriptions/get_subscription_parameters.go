// Code generated by go-swagger; DO NOT EDIT.

package subscriptions

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"

	strfmt "github.com/go-openapi/strfmt"
)

// NewGetSubscriptionParams creates a new GetSubscriptionParams object
// with the default values initialized.
func NewGetSubscriptionParams() *GetSubscriptionParams {
	var ()
	return &GetSubscriptionParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewGetSubscriptionParamsWithTimeout creates a new GetSubscriptionParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewGetSubscriptionParamsWithTimeout(timeout time.Duration) *GetSubscriptionParams {
	var ()
	return &GetSubscriptionParams{

		timeout: timeout,
	}
}

// NewGetSubscriptionParamsWithContext creates a new GetSubscriptionParams object
// with the default values initialized, and the ability to set a context for a request
func NewGetSubscriptionParamsWithContext(ctx context.Context) *GetSubscriptionParams {
	var ()
	return &GetSubscriptionParams{

		Context: ctx,
	}
}

// NewGetSubscriptionParamsWithHTTPClient creates a new GetSubscriptionParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewGetSubscriptionParamsWithHTTPClient(client *http.Client) *GetSubscriptionParams {
	var ()
	return &GetSubscriptionParams{
		HTTPClient: client,
	}
}

/*GetSubscriptionParams contains all the parameters to send to the API endpoint
for the get subscription operation typically these are written to a http.Request
*/
type GetSubscriptionParams struct {

	/*SubscriptionID*/
	SubscriptionID string
	/*XAnchoreAccount
	  An account name to change the resource scope of the request to that account, if permissions allow (admin only)

	*/
	XAnchoreAccount *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the get subscription params
func (o *GetSubscriptionParams) WithTimeout(timeout time.Duration) *GetSubscriptionParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get subscription params
func (o *GetSubscriptionParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get subscription params
func (o *GetSubscriptionParams) WithContext(ctx context.Context) *GetSubscriptionParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get subscription params
func (o *GetSubscriptionParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get subscription params
func (o *GetSubscriptionParams) WithHTTPClient(client *http.Client) *GetSubscriptionParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get subscription params
func (o *GetSubscriptionParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithSubscriptionID adds the subscriptionID to the get subscription params
func (o *GetSubscriptionParams) WithSubscriptionID(subscriptionID string) *GetSubscriptionParams {
	o.SetSubscriptionID(subscriptionID)
	return o
}

// SetSubscriptionID adds the subscriptionId to the get subscription params
func (o *GetSubscriptionParams) SetSubscriptionID(subscriptionID string) {
	o.SubscriptionID = subscriptionID
}

// WithXAnchoreAccount adds the xAnchoreAccount to the get subscription params
func (o *GetSubscriptionParams) WithXAnchoreAccount(xAnchoreAccount *string) *GetSubscriptionParams {
	o.SetXAnchoreAccount(xAnchoreAccount)
	return o
}

// SetXAnchoreAccount adds the xAnchoreAccount to the get subscription params
func (o *GetSubscriptionParams) SetXAnchoreAccount(xAnchoreAccount *string) {
	o.XAnchoreAccount = xAnchoreAccount
}

// WriteToRequest writes these params to a swagger request
func (o *GetSubscriptionParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// path param subscriptionId
	if err := r.SetPathParam("subscriptionId", o.SubscriptionID); err != nil {
		return err
	}

	if o.XAnchoreAccount != nil {

		// header param x-anchore-account
		if err := r.SetHeaderParam("x-anchore-account", *o.XAnchoreAccount); err != nil {
			return err
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
