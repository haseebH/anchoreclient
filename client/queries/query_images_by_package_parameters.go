// Code generated by go-swagger; DO NOT EDIT.

package queries

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"
)

// NewQueryImagesByPackageParams creates a new QueryImagesByPackageParams object
// with the default values initialized.
func NewQueryImagesByPackageParams() *QueryImagesByPackageParams {
	var ()
	return &QueryImagesByPackageParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewQueryImagesByPackageParamsWithTimeout creates a new QueryImagesByPackageParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewQueryImagesByPackageParamsWithTimeout(timeout time.Duration) *QueryImagesByPackageParams {
	var ()
	return &QueryImagesByPackageParams{

		timeout: timeout,
	}
}

// NewQueryImagesByPackageParamsWithContext creates a new QueryImagesByPackageParams object
// with the default values initialized, and the ability to set a context for a request
func NewQueryImagesByPackageParamsWithContext(ctx context.Context) *QueryImagesByPackageParams {
	var ()
	return &QueryImagesByPackageParams{

		Context: ctx,
	}
}

// NewQueryImagesByPackageParamsWithHTTPClient creates a new QueryImagesByPackageParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewQueryImagesByPackageParamsWithHTTPClient(client *http.Client) *QueryImagesByPackageParams {
	var ()
	return &QueryImagesByPackageParams{
		HTTPClient: client,
	}
}

/*QueryImagesByPackageParams contains all the parameters to send to the API endpoint
for the query images by package operation typically these are written to a http.Request
*/
type QueryImagesByPackageParams struct {

	/*Limit
	  Limit the number of records for the requested page. If omitted or set to 0, return all results in a single page

	*/
	Limit *int64
	/*Name
	  Name of package to search for (e.g. sed)

	*/
	Name string
	/*PackageType
	  Type of package to filter on (e.g. dpkg)

	*/
	PackageType *string
	/*Page
	  The page of results to fetch. Pages start at 1

	*/
	Page *string
	/*Version
	  Version of named package to filter on (e.g. 4.4-1)

	*/
	Version *string
	/*XAnchoreAccount
	  An account name to change the resource scope of the request to that account, if permissions allow (admin only)

	*/
	XAnchoreAccount *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the query images by package params
func (o *QueryImagesByPackageParams) WithTimeout(timeout time.Duration) *QueryImagesByPackageParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the query images by package params
func (o *QueryImagesByPackageParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the query images by package params
func (o *QueryImagesByPackageParams) WithContext(ctx context.Context) *QueryImagesByPackageParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the query images by package params
func (o *QueryImagesByPackageParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the query images by package params
func (o *QueryImagesByPackageParams) WithHTTPClient(client *http.Client) *QueryImagesByPackageParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the query images by package params
func (o *QueryImagesByPackageParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithLimit adds the limit to the query images by package params
func (o *QueryImagesByPackageParams) WithLimit(limit *int64) *QueryImagesByPackageParams {
	o.SetLimit(limit)
	return o
}

// SetLimit adds the limit to the query images by package params
func (o *QueryImagesByPackageParams) SetLimit(limit *int64) {
	o.Limit = limit
}

// WithName adds the name to the query images by package params
func (o *QueryImagesByPackageParams) WithName(name string) *QueryImagesByPackageParams {
	o.SetName(name)
	return o
}

// SetName adds the name to the query images by package params
func (o *QueryImagesByPackageParams) SetName(name string) {
	o.Name = name
}

// WithPackageType adds the packageType to the query images by package params
func (o *QueryImagesByPackageParams) WithPackageType(packageType *string) *QueryImagesByPackageParams {
	o.SetPackageType(packageType)
	return o
}

// SetPackageType adds the packageType to the query images by package params
func (o *QueryImagesByPackageParams) SetPackageType(packageType *string) {
	o.PackageType = packageType
}

// WithPage adds the page to the query images by package params
func (o *QueryImagesByPackageParams) WithPage(page *string) *QueryImagesByPackageParams {
	o.SetPage(page)
	return o
}

// SetPage adds the page to the query images by package params
func (o *QueryImagesByPackageParams) SetPage(page *string) {
	o.Page = page
}

// WithVersion adds the version to the query images by package params
func (o *QueryImagesByPackageParams) WithVersion(version *string) *QueryImagesByPackageParams {
	o.SetVersion(version)
	return o
}

// SetVersion adds the version to the query images by package params
func (o *QueryImagesByPackageParams) SetVersion(version *string) {
	o.Version = version
}

// WithXAnchoreAccount adds the xAnchoreAccount to the query images by package params
func (o *QueryImagesByPackageParams) WithXAnchoreAccount(xAnchoreAccount *string) *QueryImagesByPackageParams {
	o.SetXAnchoreAccount(xAnchoreAccount)
	return o
}

// SetXAnchoreAccount adds the xAnchoreAccount to the query images by package params
func (o *QueryImagesByPackageParams) SetXAnchoreAccount(xAnchoreAccount *string) {
	o.XAnchoreAccount = xAnchoreAccount
}

// WriteToRequest writes these params to a swagger request
func (o *QueryImagesByPackageParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.Limit != nil {

		// query param limit
		var qrLimit int64
		if o.Limit != nil {
			qrLimit = *o.Limit
		}
		qLimit := swag.FormatInt64(qrLimit)
		if qLimit != "" {
			if err := r.SetQueryParam("limit", qLimit); err != nil {
				return err
			}
		}

	}

	// query param name
	qrName := o.Name
	qName := qrName
	if qName != "" {
		if err := r.SetQueryParam("name", qName); err != nil {
			return err
		}
	}

	if o.PackageType != nil {

		// query param package_type
		var qrPackageType string
		if o.PackageType != nil {
			qrPackageType = *o.PackageType
		}
		qPackageType := qrPackageType
		if qPackageType != "" {
			if err := r.SetQueryParam("package_type", qPackageType); err != nil {
				return err
			}
		}

	}

	if o.Page != nil {

		// query param page
		var qrPage string
		if o.Page != nil {
			qrPage = *o.Page
		}
		qPage := qrPage
		if qPage != "" {
			if err := r.SetQueryParam("page", qPage); err != nil {
				return err
			}
		}

	}

	if o.Version != nil {

		// query param version
		var qrVersion string
		if o.Version != nil {
			qrVersion = *o.Version
		}
		qVersion := qrVersion
		if qVersion != "" {
			if err := r.SetQueryParam("version", qVersion); err != nil {
				return err
			}
		}

	}

	if o.XAnchoreAccount != nil {

		// header param x-anchore-account
		if err := r.SetHeaderParam("x-anchore-account", *o.XAnchoreAccount); err != nil {
			return err
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
