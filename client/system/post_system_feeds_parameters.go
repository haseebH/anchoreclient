// Code generated by go-swagger; DO NOT EDIT.

package system

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"
)

// NewPostSystemFeedsParams creates a new PostSystemFeedsParams object
// with the default values initialized.
func NewPostSystemFeedsParams() *PostSystemFeedsParams {
	var ()
	return &PostSystemFeedsParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewPostSystemFeedsParamsWithTimeout creates a new PostSystemFeedsParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewPostSystemFeedsParamsWithTimeout(timeout time.Duration) *PostSystemFeedsParams {
	var ()
	return &PostSystemFeedsParams{

		timeout: timeout,
	}
}

// NewPostSystemFeedsParamsWithContext creates a new PostSystemFeedsParams object
// with the default values initialized, and the ability to set a context for a request
func NewPostSystemFeedsParamsWithContext(ctx context.Context) *PostSystemFeedsParams {
	var ()
	return &PostSystemFeedsParams{

		Context: ctx,
	}
}

// NewPostSystemFeedsParamsWithHTTPClient creates a new PostSystemFeedsParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewPostSystemFeedsParamsWithHTTPClient(client *http.Client) *PostSystemFeedsParams {
	var ()
	return &PostSystemFeedsParams{
		HTTPClient: client,
	}
}

/*PostSystemFeedsParams contains all the parameters to send to the API endpoint
for the post system feeds operation typically these are written to a http.Request
*/
type PostSystemFeedsParams struct {

	/*Flush
	  instruct system to flush existing data feeds records from anchore-engine

	*/
	Flush *bool
	/*Sync
	  instruct system to re-sync data feeds

	*/
	Sync *bool

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the post system feeds params
func (o *PostSystemFeedsParams) WithTimeout(timeout time.Duration) *PostSystemFeedsParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the post system feeds params
func (o *PostSystemFeedsParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the post system feeds params
func (o *PostSystemFeedsParams) WithContext(ctx context.Context) *PostSystemFeedsParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the post system feeds params
func (o *PostSystemFeedsParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the post system feeds params
func (o *PostSystemFeedsParams) WithHTTPClient(client *http.Client) *PostSystemFeedsParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the post system feeds params
func (o *PostSystemFeedsParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithFlush adds the flush to the post system feeds params
func (o *PostSystemFeedsParams) WithFlush(flush *bool) *PostSystemFeedsParams {
	o.SetFlush(flush)
	return o
}

// SetFlush adds the flush to the post system feeds params
func (o *PostSystemFeedsParams) SetFlush(flush *bool) {
	o.Flush = flush
}

// WithSync adds the sync to the post system feeds params
func (o *PostSystemFeedsParams) WithSync(sync *bool) *PostSystemFeedsParams {
	o.SetSync(sync)
	return o
}

// SetSync adds the sync to the post system feeds params
func (o *PostSystemFeedsParams) SetSync(sync *bool) {
	o.Sync = sync
}

// WriteToRequest writes these params to a swagger request
func (o *PostSystemFeedsParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.Flush != nil {

		// query param flush
		var qrFlush bool
		if o.Flush != nil {
			qrFlush = *o.Flush
		}
		qFlush := swag.FormatBool(qrFlush)
		if qFlush != "" {
			if err := r.SetQueryParam("flush", qFlush); err != nil {
				return err
			}
		}

	}

	if o.Sync != nil {

		// query param sync
		var qrSync bool
		if o.Sync != nil {
			qrSync = *o.Sync
		}
		qSync := swag.FormatBool(qrSync)
		if qSync != "" {
			if err := r.SetQueryParam("sync", qSync); err != nil {
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
