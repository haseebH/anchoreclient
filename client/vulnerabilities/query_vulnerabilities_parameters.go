// Code generated by go-swagger; DO NOT EDIT.

package vulnerabilities

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"
)

// NewQueryVulnerabilitiesParams creates a new QueryVulnerabilitiesParams object
// with the default values initialized.
func NewQueryVulnerabilitiesParams() *QueryVulnerabilitiesParams {
	var (
		pageDefault = string("1")
	)
	return &QueryVulnerabilitiesParams{
		Page: &pageDefault,

		timeout: cr.DefaultTimeout,
	}
}

// NewQueryVulnerabilitiesParamsWithTimeout creates a new QueryVulnerabilitiesParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewQueryVulnerabilitiesParamsWithTimeout(timeout time.Duration) *QueryVulnerabilitiesParams {
	var (
		pageDefault = string("1")
	)
	return &QueryVulnerabilitiesParams{
		Page: &pageDefault,

		timeout: timeout,
	}
}

// NewQueryVulnerabilitiesParamsWithContext creates a new QueryVulnerabilitiesParams object
// with the default values initialized, and the ability to set a context for a request
func NewQueryVulnerabilitiesParamsWithContext(ctx context.Context) *QueryVulnerabilitiesParams {
	var (
		pageDefault = string("1")
	)
	return &QueryVulnerabilitiesParams{
		Page: &pageDefault,

		Context: ctx,
	}
}

// NewQueryVulnerabilitiesParamsWithHTTPClient creates a new QueryVulnerabilitiesParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewQueryVulnerabilitiesParamsWithHTTPClient(client *http.Client) *QueryVulnerabilitiesParams {
	var (
		pageDefault = string("1")
	)
	return &QueryVulnerabilitiesParams{
		Page:       &pageDefault,
		HTTPClient: client,
	}
}

/*QueryVulnerabilitiesParams contains all the parameters to send to the API endpoint
for the query vulnerabilities operation typically these are written to a http.Request
*/
type QueryVulnerabilitiesParams struct {

	/*AffectedPackage
	  Filter results by specified package name (e.g. sed)

	*/
	AffectedPackage *string
	/*AffectedPackageVersion
	  Filter results by specified package version (e.g. 4.4-1)

	*/
	AffectedPackageVersion *string
	/*ID
	  The ID of the vulnerability (e.g. CVE-1999-0001)

	*/
	ID []string
	/*Limit
	  Limit the number of records for the requested page. If omitted or set to 0, return all results in a single page

	*/
	Limit *int64
	/*Namespace
	  Namespace(s) to filter vulnerability records by

	*/
	Namespace []string
	/*Page
	  The page of results to fetch. Pages start at 1

	*/
	Page *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the query vulnerabilities params
func (o *QueryVulnerabilitiesParams) WithTimeout(timeout time.Duration) *QueryVulnerabilitiesParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the query vulnerabilities params
func (o *QueryVulnerabilitiesParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the query vulnerabilities params
func (o *QueryVulnerabilitiesParams) WithContext(ctx context.Context) *QueryVulnerabilitiesParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the query vulnerabilities params
func (o *QueryVulnerabilitiesParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the query vulnerabilities params
func (o *QueryVulnerabilitiesParams) WithHTTPClient(client *http.Client) *QueryVulnerabilitiesParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the query vulnerabilities params
func (o *QueryVulnerabilitiesParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithAffectedPackage adds the affectedPackage to the query vulnerabilities params
func (o *QueryVulnerabilitiesParams) WithAffectedPackage(affectedPackage *string) *QueryVulnerabilitiesParams {
	o.SetAffectedPackage(affectedPackage)
	return o
}

// SetAffectedPackage adds the affectedPackage to the query vulnerabilities params
func (o *QueryVulnerabilitiesParams) SetAffectedPackage(affectedPackage *string) {
	o.AffectedPackage = affectedPackage
}

// WithAffectedPackageVersion adds the affectedPackageVersion to the query vulnerabilities params
func (o *QueryVulnerabilitiesParams) WithAffectedPackageVersion(affectedPackageVersion *string) *QueryVulnerabilitiesParams {
	o.SetAffectedPackageVersion(affectedPackageVersion)
	return o
}

// SetAffectedPackageVersion adds the affectedPackageVersion to the query vulnerabilities params
func (o *QueryVulnerabilitiesParams) SetAffectedPackageVersion(affectedPackageVersion *string) {
	o.AffectedPackageVersion = affectedPackageVersion
}

// WithID adds the id to the query vulnerabilities params
func (o *QueryVulnerabilitiesParams) WithID(id []string) *QueryVulnerabilitiesParams {
	o.SetID(id)
	return o
}

// SetID adds the id to the query vulnerabilities params
func (o *QueryVulnerabilitiesParams) SetID(id []string) {
	o.ID = id
}

// WithLimit adds the limit to the query vulnerabilities params
func (o *QueryVulnerabilitiesParams) WithLimit(limit *int64) *QueryVulnerabilitiesParams {
	o.SetLimit(limit)
	return o
}

// SetLimit adds the limit to the query vulnerabilities params
func (o *QueryVulnerabilitiesParams) SetLimit(limit *int64) {
	o.Limit = limit
}

// WithNamespace adds the namespace to the query vulnerabilities params
func (o *QueryVulnerabilitiesParams) WithNamespace(namespace []string) *QueryVulnerabilitiesParams {
	o.SetNamespace(namespace)
	return o
}

// SetNamespace adds the namespace to the query vulnerabilities params
func (o *QueryVulnerabilitiesParams) SetNamespace(namespace []string) {
	o.Namespace = namespace
}

// WithPage adds the page to the query vulnerabilities params
func (o *QueryVulnerabilitiesParams) WithPage(page *string) *QueryVulnerabilitiesParams {
	o.SetPage(page)
	return o
}

// SetPage adds the page to the query vulnerabilities params
func (o *QueryVulnerabilitiesParams) SetPage(page *string) {
	o.Page = page
}

// WriteToRequest writes these params to a swagger request
func (o *QueryVulnerabilitiesParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.AffectedPackage != nil {

		// query param affected_package
		var qrAffectedPackage string
		if o.AffectedPackage != nil {
			qrAffectedPackage = *o.AffectedPackage
		}
		qAffectedPackage := qrAffectedPackage
		if qAffectedPackage != "" {
			if err := r.SetQueryParam("affected_package", qAffectedPackage); err != nil {
				return err
			}
		}

	}

	if o.AffectedPackageVersion != nil {

		// query param affected_package_version
		var qrAffectedPackageVersion string
		if o.AffectedPackageVersion != nil {
			qrAffectedPackageVersion = *o.AffectedPackageVersion
		}
		qAffectedPackageVersion := qrAffectedPackageVersion
		if qAffectedPackageVersion != "" {
			if err := r.SetQueryParam("affected_package_version", qAffectedPackageVersion); err != nil {
				return err
			}
		}

	}

	valuesID := o.ID

	joinedID := swag.JoinByFormat(valuesID, "")
	// query array param id
	if err := r.SetQueryParam("id", joinedID...); err != nil {
		return err
	}

	if o.Limit != nil {

		// query param limit
		var qrLimit int64
		if o.Limit != nil {
			qrLimit = *o.Limit
		}
		qLimit := swag.FormatInt64(qrLimit)
		if qLimit != "" {
			if err := r.SetQueryParam("limit", qLimit); err != nil {
				return err
			}
		}

	}

	valuesNamespace := o.Namespace

	joinedNamespace := swag.JoinByFormat(valuesNamespace, "")
	// query array param namespace
	if err := r.SetQueryParam("namespace", joinedNamespace...); err != nil {
		return err
	}

	if o.Page != nil {

		// query param page
		var qrPage string
		if o.Page != nil {
			qrPage = *o.Page
		}
		qPage := qrPage
		if qPage != "" {
			if err := r.SetQueryParam("page", qPage); err != nil {
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
