// Code generated by go-swagger; DO NOT EDIT.

package vulnerabilities

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"
)

// NewQueryImagesByVulnerabilityParams creates a new QueryImagesByVulnerabilityParams object
// with the default values initialized.
func NewQueryImagesByVulnerabilityParams() *QueryImagesByVulnerabilityParams {
	var (
		vendorOnlyDefault = bool(true)
	)
	return &QueryImagesByVulnerabilityParams{
		VendorOnly: &vendorOnlyDefault,

		timeout: cr.DefaultTimeout,
	}
}

// NewQueryImagesByVulnerabilityParamsWithTimeout creates a new QueryImagesByVulnerabilityParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewQueryImagesByVulnerabilityParamsWithTimeout(timeout time.Duration) *QueryImagesByVulnerabilityParams {
	var (
		vendorOnlyDefault = bool(true)
	)
	return &QueryImagesByVulnerabilityParams{
		VendorOnly: &vendorOnlyDefault,

		timeout: timeout,
	}
}

// NewQueryImagesByVulnerabilityParamsWithContext creates a new QueryImagesByVulnerabilityParams object
// with the default values initialized, and the ability to set a context for a request
func NewQueryImagesByVulnerabilityParamsWithContext(ctx context.Context) *QueryImagesByVulnerabilityParams {
	var (
		vendorOnlyDefault = bool(true)
	)
	return &QueryImagesByVulnerabilityParams{
		VendorOnly: &vendorOnlyDefault,

		Context: ctx,
	}
}

// NewQueryImagesByVulnerabilityParamsWithHTTPClient creates a new QueryImagesByVulnerabilityParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewQueryImagesByVulnerabilityParamsWithHTTPClient(client *http.Client) *QueryImagesByVulnerabilityParams {
	var (
		vendorOnlyDefault = bool(true)
	)
	return &QueryImagesByVulnerabilityParams{
		VendorOnly: &vendorOnlyDefault,
		HTTPClient: client,
	}
}

/*QueryImagesByVulnerabilityParams contains all the parameters to send to the API endpoint
for the query images by vulnerability operation typically these are written to a http.Request
*/
type QueryImagesByVulnerabilityParams struct {

	/*AffectedPackage
	  Filter results to images with vulnable packages with the given package name (e.g. libssl)

	*/
	AffectedPackage *string
	/*Limit
	  Limit the number of records for the requested page. If omitted or set to 0, return all results in a single page

	*/
	Limit *int64
	/*Namespace
	  Filter results to images within the given vulnerability namespace (e.g. debian:8, ubuntu:14.04)

	*/
	Namespace *string
	/*Page
	  The page of results to fetch. Pages start at 1

	*/
	Page *int64
	/*Severity
	  Filter results to vulnerable package/vulnerability with the given severity

	*/
	Severity *string
	/*VendorOnly
	  Filter results to include only vulnerabilities that are not marked as invalid by upstream OS vendor data

	*/
	VendorOnly *bool
	/*VulnerabilityID
	  The ID of the vulnerability to search for within all images stored in anchore-engine (e.g. CVE-1999-0001)

	*/
	VulnerabilityID string
	/*XAnchoreAccount
	  An account name to change the resource scope of the request to that account, if permissions allow (admin only)

	*/
	XAnchoreAccount *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the query images by vulnerability params
func (o *QueryImagesByVulnerabilityParams) WithTimeout(timeout time.Duration) *QueryImagesByVulnerabilityParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the query images by vulnerability params
func (o *QueryImagesByVulnerabilityParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the query images by vulnerability params
func (o *QueryImagesByVulnerabilityParams) WithContext(ctx context.Context) *QueryImagesByVulnerabilityParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the query images by vulnerability params
func (o *QueryImagesByVulnerabilityParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the query images by vulnerability params
func (o *QueryImagesByVulnerabilityParams) WithHTTPClient(client *http.Client) *QueryImagesByVulnerabilityParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the query images by vulnerability params
func (o *QueryImagesByVulnerabilityParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithAffectedPackage adds the affectedPackage to the query images by vulnerability params
func (o *QueryImagesByVulnerabilityParams) WithAffectedPackage(affectedPackage *string) *QueryImagesByVulnerabilityParams {
	o.SetAffectedPackage(affectedPackage)
	return o
}

// SetAffectedPackage adds the affectedPackage to the query images by vulnerability params
func (o *QueryImagesByVulnerabilityParams) SetAffectedPackage(affectedPackage *string) {
	o.AffectedPackage = affectedPackage
}

// WithLimit adds the limit to the query images by vulnerability params
func (o *QueryImagesByVulnerabilityParams) WithLimit(limit *int64) *QueryImagesByVulnerabilityParams {
	o.SetLimit(limit)
	return o
}

// SetLimit adds the limit to the query images by vulnerability params
func (o *QueryImagesByVulnerabilityParams) SetLimit(limit *int64) {
	o.Limit = limit
}

// WithNamespace adds the namespace to the query images by vulnerability params
func (o *QueryImagesByVulnerabilityParams) WithNamespace(namespace *string) *QueryImagesByVulnerabilityParams {
	o.SetNamespace(namespace)
	return o
}

// SetNamespace adds the namespace to the query images by vulnerability params
func (o *QueryImagesByVulnerabilityParams) SetNamespace(namespace *string) {
	o.Namespace = namespace
}

// WithPage adds the page to the query images by vulnerability params
func (o *QueryImagesByVulnerabilityParams) WithPage(page *int64) *QueryImagesByVulnerabilityParams {
	o.SetPage(page)
	return o
}

// SetPage adds the page to the query images by vulnerability params
func (o *QueryImagesByVulnerabilityParams) SetPage(page *int64) {
	o.Page = page
}

// WithSeverity adds the severity to the query images by vulnerability params
func (o *QueryImagesByVulnerabilityParams) WithSeverity(severity *string) *QueryImagesByVulnerabilityParams {
	o.SetSeverity(severity)
	return o
}

// SetSeverity adds the severity to the query images by vulnerability params
func (o *QueryImagesByVulnerabilityParams) SetSeverity(severity *string) {
	o.Severity = severity
}

// WithVendorOnly adds the vendorOnly to the query images by vulnerability params
func (o *QueryImagesByVulnerabilityParams) WithVendorOnly(vendorOnly *bool) *QueryImagesByVulnerabilityParams {
	o.SetVendorOnly(vendorOnly)
	return o
}

// SetVendorOnly adds the vendorOnly to the query images by vulnerability params
func (o *QueryImagesByVulnerabilityParams) SetVendorOnly(vendorOnly *bool) {
	o.VendorOnly = vendorOnly
}

// WithVulnerabilityID adds the vulnerabilityID to the query images by vulnerability params
func (o *QueryImagesByVulnerabilityParams) WithVulnerabilityID(vulnerabilityID string) *QueryImagesByVulnerabilityParams {
	o.SetVulnerabilityID(vulnerabilityID)
	return o
}

// SetVulnerabilityID adds the vulnerabilityId to the query images by vulnerability params
func (o *QueryImagesByVulnerabilityParams) SetVulnerabilityID(vulnerabilityID string) {
	o.VulnerabilityID = vulnerabilityID
}

// WithXAnchoreAccount adds the xAnchoreAccount to the query images by vulnerability params
func (o *QueryImagesByVulnerabilityParams) WithXAnchoreAccount(xAnchoreAccount *string) *QueryImagesByVulnerabilityParams {
	o.SetXAnchoreAccount(xAnchoreAccount)
	return o
}

// SetXAnchoreAccount adds the xAnchoreAccount to the query images by vulnerability params
func (o *QueryImagesByVulnerabilityParams) SetXAnchoreAccount(xAnchoreAccount *string) {
	o.XAnchoreAccount = xAnchoreAccount
}

// WriteToRequest writes these params to a swagger request
func (o *QueryImagesByVulnerabilityParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.AffectedPackage != nil {

		// query param affected_package
		var qrAffectedPackage string
		if o.AffectedPackage != nil {
			qrAffectedPackage = *o.AffectedPackage
		}
		qAffectedPackage := qrAffectedPackage
		if qAffectedPackage != "" {
			if err := r.SetQueryParam("affected_package", qAffectedPackage); err != nil {
				return err
			}
		}

	}

	if o.Limit != nil {

		// query param limit
		var qrLimit int64
		if o.Limit != nil {
			qrLimit = *o.Limit
		}
		qLimit := swag.FormatInt64(qrLimit)
		if qLimit != "" {
			if err := r.SetQueryParam("limit", qLimit); err != nil {
				return err
			}
		}

	}

	if o.Namespace != nil {

		// query param namespace
		var qrNamespace string
		if o.Namespace != nil {
			qrNamespace = *o.Namespace
		}
		qNamespace := qrNamespace
		if qNamespace != "" {
			if err := r.SetQueryParam("namespace", qNamespace); err != nil {
				return err
			}
		}

	}

	if o.Page != nil {

		// query param page
		var qrPage int64
		if o.Page != nil {
			qrPage = *o.Page
		}
		qPage := swag.FormatInt64(qrPage)
		if qPage != "" {
			if err := r.SetQueryParam("page", qPage); err != nil {
				return err
			}
		}

	}

	if o.Severity != nil {

		// query param severity
		var qrSeverity string
		if o.Severity != nil {
			qrSeverity = *o.Severity
		}
		qSeverity := qrSeverity
		if qSeverity != "" {
			if err := r.SetQueryParam("severity", qSeverity); err != nil {
				return err
			}
		}

	}

	if o.VendorOnly != nil {

		// query param vendor_only
		var qrVendorOnly bool
		if o.VendorOnly != nil {
			qrVendorOnly = *o.VendorOnly
		}
		qVendorOnly := swag.FormatBool(qrVendorOnly)
		if qVendorOnly != "" {
			if err := r.SetQueryParam("vendor_only", qVendorOnly); err != nil {
				return err
			}
		}

	}

	// query param vulnerability_id
	qrVulnerabilityID := o.VulnerabilityID
	qVulnerabilityID := qrVulnerabilityID
	if qVulnerabilityID != "" {
		if err := r.SetQueryParam("vulnerability_id", qVulnerabilityID); err != nil {
			return err
		}
	}

	if o.XAnchoreAccount != nil {

		// header param x-anchore-account
		if err := r.SetHeaderParam("x-anchore-account", *o.XAnchoreAccount); err != nil {
			return err
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
