// Code generated by go-swagger; DO NOT EDIT.

package user_management

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"

	strfmt "github.com/go-openapi/strfmt"
)

// NewDeleteUserCredentialParams creates a new DeleteUserCredentialParams object
// with the default values initialized.
func NewDeleteUserCredentialParams() *DeleteUserCredentialParams {
	var ()
	return &DeleteUserCredentialParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewDeleteUserCredentialParamsWithTimeout creates a new DeleteUserCredentialParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewDeleteUserCredentialParamsWithTimeout(timeout time.Duration) *DeleteUserCredentialParams {
	var ()
	return &DeleteUserCredentialParams{

		timeout: timeout,
	}
}

// NewDeleteUserCredentialParamsWithContext creates a new DeleteUserCredentialParams object
// with the default values initialized, and the ability to set a context for a request
func NewDeleteUserCredentialParamsWithContext(ctx context.Context) *DeleteUserCredentialParams {
	var ()
	return &DeleteUserCredentialParams{

		Context: ctx,
	}
}

// NewDeleteUserCredentialParamsWithHTTPClient creates a new DeleteUserCredentialParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewDeleteUserCredentialParamsWithHTTPClient(client *http.Client) *DeleteUserCredentialParams {
	var ()
	return &DeleteUserCredentialParams{
		HTTPClient: client,
	}
}

/*DeleteUserCredentialParams contains all the parameters to send to the API endpoint
for the delete user credential operation typically these are written to a http.Request
*/
type DeleteUserCredentialParams struct {

	/*Accountname*/
	Accountname string
	/*CredentialType*/
	CredentialType string
	/*Username*/
	Username string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the delete user credential params
func (o *DeleteUserCredentialParams) WithTimeout(timeout time.Duration) *DeleteUserCredentialParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the delete user credential params
func (o *DeleteUserCredentialParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the delete user credential params
func (o *DeleteUserCredentialParams) WithContext(ctx context.Context) *DeleteUserCredentialParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the delete user credential params
func (o *DeleteUserCredentialParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the delete user credential params
func (o *DeleteUserCredentialParams) WithHTTPClient(client *http.Client) *DeleteUserCredentialParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the delete user credential params
func (o *DeleteUserCredentialParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithAccountname adds the accountname to the delete user credential params
func (o *DeleteUserCredentialParams) WithAccountname(accountname string) *DeleteUserCredentialParams {
	o.SetAccountname(accountname)
	return o
}

// SetAccountname adds the accountname to the delete user credential params
func (o *DeleteUserCredentialParams) SetAccountname(accountname string) {
	o.Accountname = accountname
}

// WithCredentialType adds the credentialType to the delete user credential params
func (o *DeleteUserCredentialParams) WithCredentialType(credentialType string) *DeleteUserCredentialParams {
	o.SetCredentialType(credentialType)
	return o
}

// SetCredentialType adds the credentialType to the delete user credential params
func (o *DeleteUserCredentialParams) SetCredentialType(credentialType string) {
	o.CredentialType = credentialType
}

// WithUsername adds the username to the delete user credential params
func (o *DeleteUserCredentialParams) WithUsername(username string) *DeleteUserCredentialParams {
	o.SetUsername(username)
	return o
}

// SetUsername adds the username to the delete user credential params
func (o *DeleteUserCredentialParams) SetUsername(username string) {
	o.Username = username
}

// WriteToRequest writes these params to a swagger request
func (o *DeleteUserCredentialParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// path param accountname
	if err := r.SetPathParam("accountname", o.Accountname); err != nil {
		return err
	}

	// query param credential_type
	qrCredentialType := o.CredentialType
	qCredentialType := qrCredentialType
	if qCredentialType != "" {
		if err := r.SetQueryParam("credential_type", qCredentialType); err != nil {
			return err
		}
	}

	// path param username
	if err := r.SetPathParam("username", o.Username); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
