// Code generated by go-swagger; DO NOT EDIT.

package user_management

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/haseebh/anchoreclient/models"
)

// UpdateAccountStateReader is a Reader for the UpdateAccountState structure.
type UpdateAccountStateReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *UpdateAccountStateReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewUpdateAccountStateOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewUpdateAccountStateBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewUpdateAccountStateInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewUpdateAccountStateOK creates a UpdateAccountStateOK with default headers values
func NewUpdateAccountStateOK() *UpdateAccountStateOK {
	return &UpdateAccountStateOK{}
}

/*UpdateAccountStateOK handles this case with default header values.

Updated state of the account
*/
type UpdateAccountStateOK struct {
	Payload *models.AccountStatus
}

func (o *UpdateAccountStateOK) Error() string {
	return fmt.Sprintf("[PUT /accounts/{accountname}/state][%d] updateAccountStateOK  %+v", 200, o.Payload)
}

func (o *UpdateAccountStateOK) GetPayload() *models.AccountStatus {
	return o.Payload
}

func (o *UpdateAccountStateOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.AccountStatus)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateAccountStateBadRequest creates a UpdateAccountStateBadRequest with default headers values
func NewUpdateAccountStateBadRequest() *UpdateAccountStateBadRequest {
	return &UpdateAccountStateBadRequest{}
}

/*UpdateAccountStateBadRequest handles this case with default header values.

State requested is invalid based on current state of the account
*/
type UpdateAccountStateBadRequest struct {
	Payload *models.APIErrorResponse
}

func (o *UpdateAccountStateBadRequest) Error() string {
	return fmt.Sprintf("[PUT /accounts/{accountname}/state][%d] updateAccountStateBadRequest  %+v", 400, o.Payload)
}

func (o *UpdateAccountStateBadRequest) GetPayload() *models.APIErrorResponse {
	return o.Payload
}

func (o *UpdateAccountStateBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.APIErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateAccountStateInternalServerError creates a UpdateAccountStateInternalServerError with default headers values
func NewUpdateAccountStateInternalServerError() *UpdateAccountStateInternalServerError {
	return &UpdateAccountStateInternalServerError{}
}

/*UpdateAccountStateInternalServerError handles this case with default header values.

Internal error
*/
type UpdateAccountStateInternalServerError struct {
	Payload *models.APIErrorResponse
}

func (o *UpdateAccountStateInternalServerError) Error() string {
	return fmt.Sprintf("[PUT /accounts/{accountname}/state][%d] updateAccountStateInternalServerError  %+v", 500, o.Payload)
}

func (o *UpdateAccountStateInternalServerError) GetPayload() *models.APIErrorResponse {
	return o.Payload
}

func (o *UpdateAccountStateInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.APIErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
