// Code generated by go-swagger; DO NOT EDIT.

package user_management

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/haseebh/anchoreclient/models"
)

// NewUpdateAccountStateParams creates a new UpdateAccountStateParams object
// with the default values initialized.
func NewUpdateAccountStateParams() *UpdateAccountStateParams {
	var ()
	return &UpdateAccountStateParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewUpdateAccountStateParamsWithTimeout creates a new UpdateAccountStateParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewUpdateAccountStateParamsWithTimeout(timeout time.Duration) *UpdateAccountStateParams {
	var ()
	return &UpdateAccountStateParams{

		timeout: timeout,
	}
}

// NewUpdateAccountStateParamsWithContext creates a new UpdateAccountStateParams object
// with the default values initialized, and the ability to set a context for a request
func NewUpdateAccountStateParamsWithContext(ctx context.Context) *UpdateAccountStateParams {
	var ()
	return &UpdateAccountStateParams{

		Context: ctx,
	}
}

// NewUpdateAccountStateParamsWithHTTPClient creates a new UpdateAccountStateParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewUpdateAccountStateParamsWithHTTPClient(client *http.Client) *UpdateAccountStateParams {
	var ()
	return &UpdateAccountStateParams{
		HTTPClient: client,
	}
}

/*UpdateAccountStateParams contains all the parameters to send to the API endpoint
for the update account state operation typically these are written to a http.Request
*/
type UpdateAccountStateParams struct {

	/*Accountname*/
	Accountname string
	/*DesiredState*/
	DesiredState *models.AccountStatus

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the update account state params
func (o *UpdateAccountStateParams) WithTimeout(timeout time.Duration) *UpdateAccountStateParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the update account state params
func (o *UpdateAccountStateParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the update account state params
func (o *UpdateAccountStateParams) WithContext(ctx context.Context) *UpdateAccountStateParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the update account state params
func (o *UpdateAccountStateParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the update account state params
func (o *UpdateAccountStateParams) WithHTTPClient(client *http.Client) *UpdateAccountStateParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the update account state params
func (o *UpdateAccountStateParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithAccountname adds the accountname to the update account state params
func (o *UpdateAccountStateParams) WithAccountname(accountname string) *UpdateAccountStateParams {
	o.SetAccountname(accountname)
	return o
}

// SetAccountname adds the accountname to the update account state params
func (o *UpdateAccountStateParams) SetAccountname(accountname string) {
	o.Accountname = accountname
}

// WithDesiredState adds the desiredState to the update account state params
func (o *UpdateAccountStateParams) WithDesiredState(desiredState *models.AccountStatus) *UpdateAccountStateParams {
	o.SetDesiredState(desiredState)
	return o
}

// SetDesiredState adds the desiredState to the update account state params
func (o *UpdateAccountStateParams) SetDesiredState(desiredState *models.AccountStatus) {
	o.DesiredState = desiredState
}

// WriteToRequest writes these params to a swagger request
func (o *UpdateAccountStateParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// path param accountname
	if err := r.SetPathParam("accountname", o.Accountname); err != nil {
		return err
	}

	if o.DesiredState != nil {
		if err := r.SetBodyParam(o.DesiredState); err != nil {
			return err
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
